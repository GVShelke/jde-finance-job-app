<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JDE Finance Job Finder - India</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .job-card {
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        }
        .job-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        /* Styles for Gemini-generated content */
        .prose h3 {
            font-size: 1.25rem;
            font-weight: 700;
            color: #4338ca; /* Indigo 700 */
            margin-top: 1.5em;
            margin-bottom: 0.75em;
            padding-bottom: 0.25em;
            border-bottom: 1px solid #e5e7eb; /* Gray 200 */
        }
        .prose ul {
            list-style-type: disc;
            padding-left: 1.5rem;
        }
        .prose li {
            margin-bottom: 0.5em;
        }
        .prose p {
            margin-bottom: 1em;
            line-height: 1.6;
        }
        .prose strong {
            font-weight: 600;
            color: #111827; /* Gray 900 */
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <div class="container mx-auto p-4 md:p-8 max-w-4xl">
        <!-- Header -->
        <header class="text-center mb-8">
            <h1 class="text-3xl md:text-4xl font-bold text-indigo-600">JD Edwards Finance Job Finder</h1>
            <p class="text-gray-600 mt-2">Your dedicated portal for JDE Finance Functional roles in India.</p>
        </header>

        <!-- Search Filters -->
        <div class="bg-white p-6 rounded-lg shadow-md mb-8">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
                <div class="md:col-span-2">
                    <label for="keywords" class="block text-sm font-medium text-gray-700 mb-1">Keywords</label>
                    <input type="text" id="keywords" value="JD Edwards Finance Functional" class="w-full px-4 py-2 bg-gray-200 border border-gray-300 rounded-md focus:outline-none" readonly>
                </div>
                <div>
                    <label for="jobType" class="block text-sm font-medium text-gray-700 mb-1">Job Type</label>
                    <select id="jobType" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500">
                        <option value="any">Any</option>
                        <option value="Full-time">Full-time</option>
                        <option value="Part-time">Part-time</option>
                    </select>
                </div>
            </div>
            <div class="mt-4 text-center">
                 <button id="searchBtn" class="w-full md:w-auto bg-indigo-600 text-white font-semibold py-2 px-8 rounded-md hover:bg-indigo-700 transition duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    Find Jobs
                </button>
            </div>
        </div>

        <!-- Loading Spinner -->
        <div id="loader" class="text-center my-8 hidden">
             <svg class="animate-spin h-8 w-8 text-indigo-600 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              <p class="mt-2 text-gray-600">Searching for opportunities...</p>
        </div>

        <!-- Job Listings -->
        <main id="job-listings" class="space-y-6">
            <!-- Job cards will be inserted here dynamically -->
        </main>
        
        <!-- No Results Message -->
        <div id="no-results" class="text-center my-8 bg-white p-8 rounded-lg shadow-md hidden">
             <h3 class="text-xl font-semibold text-gray-700">No matching jobs found.</h3>
             <p class="text-gray-500 mt-2">Try adjusting your filters or check back later for new opportunities.</p>
        </div>
    </div>

    <!-- Gemini Modal -->
    <div id="gemini-modal" class="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center p-4 z-50 hidden">
        <div class="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] flex flex-col">
            <div class="p-4 border-b flex justify-between items-center bg-gray-50 rounded-t-lg">
                <h3 id="modal-title" class="text-xl font-bold text-indigo-600">âœ¨ AI Assistant</h3>
                <button id="close-modal-btn" class="text-gray-500 hover:text-gray-800 text-3xl leading-none">&times;</button>
            </div>
            <div id="modal-body" class="p-6 overflow-y-auto">
                <!-- Loader -->
                <div id="modal-loader" class="text-center">
                    <svg class="animate-spin h-8 w-8 text-indigo-600 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <p class="mt-2 text-gray-600">Generating insights with Gemini...</p>
                </div>
                <!-- Content -->
                <div id="modal-content" class="prose max-w-none text-gray-700"></div>
            </div>
        </div>
    </div>

    <script>
        // --- DOM Elements ---
        const searchBtn = document.getElementById('searchBtn');
        const jobTypeSelect = document.getElementById('jobType');
        const jobListingsContainer = document.getElementById('job-listings');
        const loader = document.getElementById('loader');
        const noResultsMessage = document.getElementById('no-results');
        
        // --- Modal Elements ---
        const geminiModal = document.getElementById('gemini-modal');
        const modalTitle = document.getElementById('modal-title');
        const modalLoader = document.getElementById('modal-loader');
        const modalContent = document.getElementById('modal-content');
        const closeModalBtn = document.getElementById('close-modal-btn');

        // --- Mock Job Data ---
        const mockJobs = [
            { title: 'JDE Finance Functional Consultant', company: 'Tech Solutions Pvt. Ltd.', location: 'Pune, Maharashtra', type: 'Full-time', description: 'Seeking an experienced JDE Finance consultant with 5+ years of experience in modules like AP, AR, GL. Strong understanding of financial processes is a must. Responsibilities include system configuration, user support, and process improvement initiatives.' },
            { title: 'Senior JD Edwards Finance Analyst', company: 'Innovate Systems', location: 'Bengaluru, Karnataka', type: 'Full-time', description: 'Join our dynamic team to support and enhance our JDE EnterpriseOne Financials suite. Experience with Fixed Assets and Project Costing is a plus. You will be responsible for analyzing complex business problems and developing effective solutions.' },
            { title: 'Part-time JDE Finance Support Specialist', company: 'FlexiCorp', location: 'Remote, India', type: 'Part-time', description: 'Provide remote support for JDE financial modules for our international clients. Flexible hours (20 hours/week). Ideal for work-life balance. Must have excellent communication skills and be a self-starter.' },
            { title: 'JD Edwards Finance Business Analyst', company: 'Global Connect Inc.', location: 'Mumbai, Maharashtra', type: 'Full-time', description: 'Act as a liaison between finance stakeholders and the IT team. Gather requirements, create functional specifications, and assist in JDE finance projects. Requires strong analytical and problem-solving abilities.' },
            { title: 'JDE Finance Functional - Project Lead', company: 'ERP Masters', location: 'Hyderabad, Telangana', type: 'Full-time', description: 'Lead a team of consultants on a large-scale JDE Finance implementation project. Requires strong leadership, project management skills, and deep functional knowledge of JDE Financials.' },
            { title: 'JDE Finance Functional (Contract)', company: 'Agile Resources', location: 'Chennai, Tamil Nadu', type: 'Part-time', description: '6-month contract role for a JDE Finance expert to assist with a system upgrade. Focus on testing, documentation, and user training. Potential for extension based on performance.' },
            { title: 'Junior JDE Finance Consultant', company: 'NextGen ERP', location: 'Gurugram, Haryana', type: 'Full-time', description: 'An excellent opportunity for individuals with 1-2 years of JDE Finance experience. Get mentored by senior consultants and grow your career in a supportive environment. Eagerness to learn is essential.' }
        ];
        
        // --- Functions ---

        /**
         * Calls the Gemini API to generate content.
         * @param {string} prompt - The prompt to send to the Gemini model.
         * @param {number} retries - The number of retry attempts.
         * @param {number} delay - The initial delay for exponential backoff.
         * @returns {Promise<string>} The generated text from the model.
         */
        async function callGeminiAPI(prompt, retries = 3, delay = 1000) {
            const apiKey = ""; // This will be handled by the execution environment
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
            
            const payload = {
                contents: [{ parts: [{ text: prompt }] }],
            };

            try {
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    throw new Error(`API request failed with status ${response.status}`);
                }

                const result = await response.json();
                const candidate = result.candidates?.[0];

                if (candidate && candidate.content?.parts?.[0]?.text) {
                    return candidate.content.parts[0].text;
                } else {
                    throw new Error('Unexpected response format from API.');
                }
            } catch (error) {
                console.error('Gemini API call failed:', error);
                if (retries > 0) {
                    console.log(`Retrying in ${delay / 1000}s...`);
                    await new Promise(res => setTimeout(res, delay));
                    return callGeminiAPI(prompt, retries - 1, delay * 2); // Exponential backoff
                } else {
                    return 'Sorry, the AI assistant could not generate a response at this time. Please try again later.';
                }
            }
        }

        /**
         * Renders job listings based on the provided data.
         * @param {Array} jobs - An array of job objects.
         */
        function renderJobListings(jobs) {
            jobListingsContainer.innerHTML = ''; 
            noResultsMessage.classList.add('hidden');

            if (jobs.length === 0) {
                noResultsMessage.classList.remove('hidden');
                return;
            }

            jobs.forEach(job => {
                const jobCard = document.createElement('div');
                jobCard.className = 'job-card bg-white p-6 rounded-lg shadow-md border-l-4 border-indigo-500';
                
                // Using encodeURIComponent to safely pass data in attributes
                const encodedDesc = encodeURIComponent(job.description);
                const encodedTitle = encodeURIComponent(job.title);

                jobCard.innerHTML = `
                    <div class="flex flex-col sm:flex-row justify-between sm:items-center mb-3">
                        <h2 class="text-xl font-bold text-gray-900">${job.title}</h2>
                        <span class="text-sm font-semibold text-white ${job.type === 'Full-time' ? 'bg-green-500' : 'bg-blue-500'} px-3 py-1 rounded-full mt-2 sm:mt-0">${job.type}</span>
                    </div>
                    <div class="text-gray-600 mb-4">
                        <span class="font-semibold">${job.company}</span> &ndash; <span>${job.location}</span>
                    </div>
                    <p class="text-gray-700 mb-4">${job.description}</p>
                    <div class="flex flex-wrap gap-2 justify-end items-center mt-4">
                        <button class="gemini-btn text-xs bg-purple-100 text-purple-700 font-semibold py-2 px-4 rounded-md hover:bg-purple-200 transition duration-300" data-action="summarize" data-title="${encodedTitle}" data-desc="${encodedDesc}">
                            Summarize âœ¨
                        </button>
                        <button class="gemini-btn text-xs bg-yellow-100 text-yellow-800 font-semibold py-2 px-4 rounded-md hover:bg-yellow-200 transition duration-300" data-action="interview" data-title="${encodedTitle}" data-desc="${encodedDesc}">
                            Prep for Interview âœ¨
                        </button>
                        <a href="#" class="inline-block bg-indigo-600 text-white font-semibold py-2 px-5 rounded-md hover:bg-indigo-700 transition duration-300">
                            Apply Now
                        </a>
                    </div>
                `;
                jobListingsContainer.appendChild(jobCard);
            });
        }

        /** Simulates a search for jobs. */
        function searchJobs() {
            loader.classList.remove('hidden');
            jobListingsContainer.innerHTML = '';
            noResultsMessage.classList.add('hidden');
            const selectedType = jobTypeSelect.value;
            setTimeout(() => {
                const filteredJobs = mockJobs.filter(job => selectedType === 'any' || job.type === selectedType);
                loader.classList.add('hidden');
                renderJobListings(filteredJobs);
            }, 1500);
        }

        // --- Modal Control ---
        function openModal() {
            modalContent.innerHTML = '';
            modalLoader.classList.remove('hidden');
            geminiModal.classList.remove('hidden');
        }

        function closeModal() {
            geminiModal.classList.add('hidden');
        }

        // --- Gemini Feature Handlers ---
        async function handleGeminiAction(action, title, description) {
            openModal();
            let prompt = '';
            let newTitle = '';

            if (action === 'summarize') {
                newTitle = `âœ¨ Summary for: ${title}`;
                prompt = `You are an expert recruiter. Summarize the following job description for a "${title}" role into 3 concise bullet points. Focus on the most important responsibilities and required skills.\n\nJob Description:\n${description}`;
            } else if (action === 'interview') {
                newTitle = `âœ¨ Interview Prep for: ${title}`;
                prompt = `Act as a helpful career coach. Based on the job description for a "${title}" role, provide the following in well-structured markdown:\n\n### Potential Technical Questions:\n(List 5 relevant questions)\n\n### Potential Behavioral Questions:\n(List 5 relevant questions)\n\n### Key Skills to Emphasize:\n(List the top 3 skills or experiences the candidate should highlight)\n\nJob Description:\n${description}`;
            }
            
            modalTitle.textContent = newTitle;
            const result = await callGeminiAPI(prompt);
            
            // Basic Markdown to HTML conversion
            let htmlResult = result
                .replace(/### (.*)/g, '<h3>$1</h3>')
                .replace(/\* (.*)/g, '<li>$1</li>')
                .replace(/\n/g, '<br>');
            htmlResult = `<ul>${htmlResult.replace(/<br><li>/g, '<li>')}</ul>`.replace(/<\/li><br>/g, '</li>');
            htmlResult = htmlResult.replace(/<\/ul><br><h3>/g, '</ul><h3>');
            
            modalContent.innerHTML = htmlResult;
            modalLoader.classList.add('hidden');
        }

        // --- Event Listeners ---
        searchBtn.addEventListener('click', searchJobs);
        closeModalBtn.addEventListener('click', closeModal);
        geminiModal.addEventListener('click', (e) => {
            if (e.target === geminiModal) closeModal();
        });

        jobListingsContainer.addEventListener('click', (e) => {
            const button = e.target.closest('.gemini-btn');
            if (button) {
                const { action, title, desc } = button.dataset;
                handleGeminiAction(action, decodeURIComponent(title), decodeURIComponent(desc));
            }
        });

        // --- Initial Load ---
        window.addEventListener('load', () => searchJobs());

    </script>
</body>
</html>

